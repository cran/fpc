
R : Copyright 2003, The R Development Core Team
Version 1.8.0  (2003-10-08)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> library(fpc)
Loading required package: cluster 
Loading required package: lqs 
> example(batcoord)

batcrd> set.seed(4634)

batcrd> face <- rFace(600, dMoNo = 2, dNoEy = 0)

batcrd> grface <- as.integer(attr(face, "grouping"))

batcrd> bcf2 <- batcoord(face, grface == 2)

batcrd> plot(bcf2$proj, col = 1 + (grface == 2))

batcrd> bcfv2 <- batcoord(face, grface == 2, dom = "variance")

batcrd> plot(bcfv2$proj, col = 1 + (grface == 2))

batcrd> bcfvv2 <- batvarcoord(face, grface == 2)

batcrd> plot(bcfvv2$proj, col = 1 + (grface == 2))
> example(can)

can> can(429, 3)
[1] 8.806634
> example(clusexpect)

clsxpc> clusexpect(500, 4, 150, 2000)
[1] 1.357889
> example(cmahal)

cmahal> plot(1:100, cmahal(100, 3, nmin = 5, cmin = qchisq(0.99, 
    3), nc1 = 90), xlab = "FPC size", ylab = "cmahal")
> example(con.comp)

cn.cmp> set.seed(1000)

cn.cmp> x <- rnorm(20)

cn.cmp> m <- matrix(0, nrow = 20, ncol = 20)

cn.cmp> for (i in 1:20) for (j in 1:20) m[i, j] <- abs(x[i] - 
    x[j])

cn.cmp> d <- m < 0.2

cn.cmp> cc <- con.comp(d)

cn.cmp> max(cc)
[1] 6

cn.cmp> plot(x, cc)
> example(cov.wml)

cv.wml> x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

cv.wml> y <- c(1, 2, 3, 8, 7, 6, 5, 8, 9, 10)

cv.wml> cov.wml(cbind(x, y), wt = c(0, 0, 0, 1, 1, 1, 1, 1, 
    0, 0))
$cov
   
       x     y
  x  2.0 -0.40
  y -0.4  1.36

$center
  x   y 
6.0 6.8 

$n.obs
[1] 10

$wt
 [1] 0.0 0.0 0.0 0.2 0.2 0.2 0.2 0.2 0.0 0.0


cv.wml> cov.wt(cbind(x, y), wt = c(0, 0, 0, 1, 1, 1, 1, 1, 
    0, 0))
$cov
   
       x    y
  x  2.5 -0.5
  y -0.5  1.7

$center
  x   y 
6.0 6.8 

$n.obs
[1] 10

$wt
 [1] 0.0 0.0 0.0 0.2 0.2 0.2 0.2 0.2 0.0 0.0

> example(discrcoord)

dscrcr> set.seed(4634)

dscrcr> face <- rFace(600, dMoNo = 2, dNoEy = 0)

dscrcr> grface <- as.integer(attr(face, "grouping"))

dscrcr> dcf <- discrcoord(face, grface)

dscrcr> plot(dcf$proj, col = grface)
> example(fixmahal)

fixmhl> set.seed(20000)

fixmhl> face <- rFace(400, dMoNo = 2, dNoEy = 0, p = 3)

fixmhl> initg <- list()

fixmhl> grface <- as.integer(attr(face, "grouping"))

fixmhl> for (i in 1:5) initg[[i]] <- (grface == i)

fixmhl> ff0 <- fixmahal(face, pointit = FALSE, init.group = initg)

fixmhl> summary(ff0)
  *  Mahalanobis Fixed Point Clusters  *

Often a clear cluster in the data leads to several similar FPCs.
The summary shows the representative FPCs of groups of similar FPCs.

Method  fuzzy  was used.
Number of representative FPCs:  5 

FPCs with less than  16  points were skipped.
0  iteration runs led to  0  skipped clusters.
  Weight 1 for r^2<=  6.251389  weight 0 for r^2>  11.34487  
  Constant ca=  6.251389  corresponding to alpha=  0.9 

 FPC  1 
  Times found (group members):  1 
  Mean:
[1] -2.059856 17.120851  1.144176
  Covariance matrix:
              [,1]          [,2]        [,3]
[1,]  0.1380273772 -0.0005850577 -0.02221587
[2,] -0.0005850577  0.1493604214  0.05120692
[3,] -0.0222158688  0.0512069203  0.99970636
  Number of points (sum of weights):  38.26940 

 FPC  2 
  Times found (group members):  1 
  Mean:
[1]  1.990335 16.990115  1.168523
  Covariance matrix:
            [,1]        [,2]       [,3]
[1,] 0.155013896 0.002647451 0.04614691
[2,] 0.002647451 0.102943657 0.04792916
[3,] 0.046146913 0.047929158 1.19384338
  Number of points (sum of weights):  73.87413 

 FPC  3 
  Times found (group members):  1 
  Mean:
[1] -0.01706032  3.08725211  0.47432734
  Covariance matrix:
            [,1]        [,2]        [,3]
[1,] 0.188194114 0.001181821 0.009039074
[2,] 0.001181821 0.042873492 0.004792551
[3,] 0.009039074 0.004792551 0.124434523
  Number of points (sum of weights):  88.37003 

 FPC  4 
  Times found (group members):  2 
  Mean:
[1] 0.01031798 3.84049017 0.57963428
  Covariance matrix:
           [,1]       [,2]       [,3]
[1,] 0.17635831 0.01533119 0.02026135
[2,] 0.01533119 4.36327556 0.11767498
[3,] 0.02026135 0.11767498 0.22623388
  Number of points (sum of weights):  183.4207 

 FPC  5 
  Times found (group members):  1 
  Mean:
[1] 0.4248803 6.8480685 0.5883182
  Covariance matrix:
          [,1]        [,2]       [,3]
[1,] 0.8496890  4.53978778 0.01344090
[2,] 4.5397878 33.51962628 0.07652022
[3,] 0.0134409  0.07652022 0.23095281
  Number of points (sum of weights):  245.1377 

Number of points (rounded weights) in intersection of representative FPCs
     [,1] [,2] [,3] [,4] [,5]
[1,]   38    0    0    0    0
[2,]    0   74    0    0   54
[3,]    0    0   88   88   88
[4,]    0    0   88  183  182
[5,]    0   54   88  182  245

fixmhl> cff0 <- fpclusters(ff0)

fixmhl> plot(face, col = 1 + cff0[[1]])

fixmhl> plot(face, col = 1 + cff0[[4]])

fixmhl> plot(ff0, face, 4)
> example(fixreg)

fixreg> set.seed(190000)

fixreg> data(tonedata)

fixreg> attach(tonedata)

fixreg> tonefix <- fixreg(stretchratio, tuned, mtf = 1, ir = 20)

fixreg> summary(tonefix)
  *  Fixed Point Clusters  *

Often a clear cluster in the data leads to several similar FPCs.
The summary shows the representative FPCs of groups of similar FPCs,
which were found at least  1  times.

Constant ca=  10.07010 
Number of representative FPCs:  3 

FPCs with less than  50  points were skipped.
0  iterations led to skipped FPCs.

 FPC  1 
  Times found (group members):  17 
  Ratio to estimated expectation:  1.587200 
  Regression parameters:
 Intercept          X 
1.90507095 0.04772128 
  Error variance:  0.002815126 
  Number of points:  122 

 FPC  2 
  Times found (group members):  3 
  Ratio to estimated expectation:  2.082420 
  Regression parameters:
  Intercept           X 
0.003507292 0.998653704 
  Error variance:  3.688176e-05 
  Number of points:  63 

 FPC  3 
  Times found (group members):  1 
  Ratio to estimated expectation:  0.602382 
  Regression parameters:
Intercept         X 
0.7941830 0.6018805 
  Error variance:  0.001118718 
  Number of points:  66 

Number of points in intersection of  representative FPCs
     [,1] [,2] [,3]
[1,]  122   46   61
[2,]   46   63   47
[3,]   61   47   66
> example(itnumber)

itnmbr> itnumber(500, 4, 150, 2)
[1] 6985
> example(mahalanofix)

mhlnfx> x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

mhlnfx> y <- c(1, 2, 3, 8, 7, 6, 5, 8, 9, 10)

mhlnfx> mahalanofix(cbind(x, y), gv = c(0, 0, 0, 1, 1, 1, 
    1, 1, 0, 0))

mhlnfx> mahalanofix(cbind(x, y), gv = c(0, 0, 0, 1, 1, 1, 
    1, 0, 0, 0))

mhlnfx> mahalanofix(cbind(x, y), gv = c(0, 0, 0, 1, 1, 1, 
    1, 1, 0, 0), method = "mcd")

mhlnfx> mahalanofuz(cbind(x, y), gv = c(0, 0, 0.5, 0.5, 1, 
    1, 1, 0.5, 0.5, 0))
> example(mahalconf)

mhlcnf> set.seed(4634)

mhlcnf> face <- rFace(600, dMoNo = 2, dNoEy = 0, p = 2)

mhlcnf> mahalconf(face, no = 200, startn = 20, covall = cov(face), 
    plot = "start")
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[121] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[157] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[169]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[181] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
[193]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
[205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[229] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[241]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[253] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
[265] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[277]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[289]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
[301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[349] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[361] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[373] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[385] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[397] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[409] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[421] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[433] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[445] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[457] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[469] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[481] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[493] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[505] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[517] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[529] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[541] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[553] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[565] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[577] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[589] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> example(minsize)

minsiz> minsize(500, 4, 7000, 2)
[1] 127
> example(plotcluster)

pltcls> set.seed(4634)

pltcls> face <- rFace(600, dMoNo = 2, dNoEy = 0)

pltcls> grface <- as.integer(attr(face, "grouping"))

pltcls> plotcluster(face, grface)

pltcls> plotcluster(face, grface == 1)
> example(rFace)

rFace> set.seed(4634)

rFace> face <- rFace(600, dMoNo = 2, dNoEy = 0)

rFace> grface <- as.integer(attr(face, "grouping"))

rFace> plot(face, col = grface)

rFace> pairs(face, col = grface, main = "rFace(600,dMoNo=2,dNoEy=0)")
> example(randconf)

rndcnf> randconf(10, 3)
 [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
> example(simmatrix)

smmtrx> set.seed(190000)

smmtrx> data(tonedata)

smmtrx> attach(tonedata)

smmtrx> tonefix <- fixreg(stretchratio, tuned, mtf = 1, ir = 20)

smmtrx> simmatrix(tonefix)[sseg(2, 3)]
[1] 47
> example(solvecov)

solvcv> x <- c(1, 0, 0, 1, 0, 1, 0, 0, 1)

solvcv> dim(x) <- c(3, 3)

solvcv> solvecov(x)
> example(sseg)

sseg> sseg(3, 4)
[1] 9
> example(tdecomp)

tdecmp> x <- rnorm(10)

tdecmp> y <- rnorm(10)

tdecmp> z <- cov(cbind(x, y))

tdecmp> tdecomp(z)
          [,1]       [,2]
[1,] 1.2422312 -0.3487061
[2,] 0.3295093  1.1738448
> example(wfu)

wfu> md <- seq(0, 10, by = 0.1)

wfu> wfu(md, ca = 5, ca2 = 8)
  [1] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
  [7] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [13] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [19] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [25] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [31] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [37] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [43] 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000 1.00000000
 [49] 1.00000000 1.00000000 1.00000000 0.96666667 0.93333333 0.90000000
 [55] 0.86666667 0.83333333 0.80000000 0.76666667 0.73333333 0.70000000
 [61] 0.66666667 0.63333333 0.60000000 0.56666667 0.53333333 0.50000000
 [67] 0.46666667 0.43333333 0.40000000 0.36666667 0.33333333 0.30000000
 [73] 0.26666667 0.23333333 0.20000000 0.16666667 0.13333333 0.10000000
 [79] 0.06666667 0.03333333 0.00000000 0.00000000 0.00000000 0.00000000
 [85] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
 [91] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
 [97] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
> example(discrproj)

dscrpr> set.seed(4634)

dscrpr> face <- rFace(300, dMoNo = 2, dNoEy = 0, p = 3)

dscrpr> grface <- as.integer(attr(face, "grouping"))

dscrpr> discrproj(face, grface, method = "nc")$units
            [,1]       [,2]        [,3]
[1,]  0.84359426 1.14608710 -0.02209846
[2,] -0.33649001 0.27903245 -0.01187219
[3,] -0.06808816 0.03965075  1.00303099

dscrpr> discrproj(face, grface, method = "wnc")$units
            [,1]        [,2]         [,3]
[1,] -0.07433352 1.420772600  0.039179197
[2,] -0.43725296 0.002745807 -0.005281343
[3,] -0.03831248 0.001676168 -1.005389819

dscrpr> discrproj(face, grface == 1, method = "arc")$units
           [,1]        [,2]        [,3]
[1,]  1.2952782 -0.50007753 -0.33960121
[2,] -0.6533164 -0.05164296 -0.08010673
[3,]  0.0805180  0.66005066 -0.46509088
> example(ncoord)

ncoord> set.seed(4634)

ncoord> face <- rFace(200, dMoNo = 2, dNoEy = 0, p = 3)

ncoord> grface <- as.integer(attr(face, "grouping"))

ncoord> ncf <- ncoord(face, grface)

ncoord> plot(ncf$proj, col = grface)

ncoord> ncf2 <- ncoord(face, grface, weighted = TRUE)

ncoord> plot(ncf2$proj, col = grface)
> example(ancoord)

ancord> set.seed(4634)

ancord> face <- rFace(600, dMoNo = 2, dNoEy = 0)

ancord> grface <- as.integer(attr(face, "grouping"))

ancord> ancf2 <- ancoord(face, grface == 4)

ancord> plot(ancf2$proj, col = 1 + (grface == 4))
> example(mvdcoord)

mvdcrd> set.seed(4634)

mvdcrd> face <- rFace(300, dMoNo = 2, dNoEy = 0, p = 3)

mvdcrd> grface <- as.integer(attr(face, "grouping"))

mvdcrd> mcf <- mvdcoord(face, grface)

mvdcrd> plot(mcf$proj, col = grface)
> example(mahalanodisc)

mhlnds> x <- cbind(rnorm(50), rnorm(50))

mhlnds> mahalanodisc(x, c(0, 0), cov(x))
 [1] 1.752739996 3.355701694 1.615350036 3.876778080 2.260527932 0.974627068
 [7] 1.439599768 4.403967757 4.404140724 0.967717841 5.114622004 0.594395978
[13] 1.500249405 4.535283437 3.041514903 1.372799825 1.814936043 0.272382965
[19] 0.405190056 0.136991151 4.126285498 3.144678733 2.158986321 0.300648653
[25] 1.127232115 0.161730962 3.804493848 1.028796408 1.749850954 1.353834854
[31] 1.144988315 3.103345280 2.027051599 2.318267715 0.743680996 1.923610615
[37] 3.196255652 1.745472930 0.088628685 2.969444954 2.407224033 3.288060107
[43] 0.002262337 0.137664908 2.190792974 0.496892564 6.507558987 0.593724772
[49] 2.844162023 0.610332239

mhlnds> mahalanodisc(x, c(0, 0), matrix(0, ncol = 2, nrow = 2))
 [1] 11599051772 33016977993 18749060179 44995427256 19101996725  6024546847
 [7]  8831487205 28202711347 45490048654  8861346204 46893554628  6505176833
[13] 16621111452 27630710389 34349618061 15369344770 13585316188  1677134749
[19]  3028384292   895077936 25139382154 33419517850 24535165929  1987366082
[25]  9980727570  1698383682 38008268876  7101056763 11380065726 13469379654
[31] 12602104902 20790730356 20612033653 26757429943  8630029640 18836396352
[37] 26634923689 14634759760   833784358 22488629721 15694460016 36612310739
[43]    13783526  1349873692 15245740244  3102497868 51283959377  3761037955
[49] 26877643390  6995152921
> example(c.weight)

c.wght> c.weight(4, 1)
[1] 0.25
> example(adcoord)

adcord> set.seed(4634)

adcord> face <- rFace(600, dMoNo = 2, dNoEy = 0)

adcord> grface <- as.integer(attr(face, "grouping"))

adcord> adcf <- adcoord(face, grface == 2)

adcord> adcf2 <- adcoord(face, grface == 4)

adcord> plot(adcf$proj, col = 1 + (grface == 2))

adcord> plot(adcf2$proj, col = 1 + (grface == 4))
> example(awcoord)

awcord> set.seed(4634)

awcord> face <- rFace(600, dMoNo = 2, dNoEy = 0)

awcord> grface <- as.integer(attr(face, "grouping"))

awcord> awcf <- awcoord(face, grface == 1)

awcord> plot(awcf$proj, col = 1 + (grface == 1))
> example(regmix)

regmix> set.seed(12234)

regmix> data(tonedata)

regmix> attach(tonedata)

regmix> rmt1 <- regmix(stretchratio, tuned, nclust = 1:2)
Iteration  1  for  1  clusters.
Iteration  1  for  2  clusters.

regmix> rmt1$g
  [1] 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2
 [38] 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 1 1 1 2 2 1 2 2 2 2 2 1 2 2 1 2 2 2 2 2
 [75] 2 2 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2
[112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2
[149] 2 1

regmix> rmt1$bic
[1]   3.732369 247.322353

regmix> cln <- 3

regmix> n <- 150

regmix> initcoef <- cbind(c(2, 0), c(0, 1), c(0, 2.5))

regmix> initvar <- c(0.001, 1e-04, 0.5)

regmix> initeps <- c(0.4, 0.3, 0.3)

regmix> m <- matrix(nrow = n, ncol = cln)

regmix> stm <- numeric(0)

regmix> for (i in 1:cln) for (j in 1:n) {
    m[j, i] <- initeps[i] * dnorm(tuned[j], mean = initcoef[1, 
        i] + initcoef[2, i] * stretchratio[j], sd = sqrt(initvar[i]))
}

regmix> for (j in 1:n) {
    stm[j] <- sum(m[j, ])
    for (i in 1:cln) m[j, i] <- m[j, i]/stm[j]
}

regmix> rmt2 <- regem(stretchratio, tuned, m, cln)

regmix> rmt2bic <- 2 * rmt2$loglik - log(150) * (4 * cln - 
    1)

regmix> rmt2bic
[1] 422.4744
> example(randcmatrix)

rndcmt> set.seed(111)

rndcmt> randcmatrix(10, 2, 1)
      [,1] [,2]
 [1,]    0    1
 [2,]    0    1
 [3,]    1    0
 [4,]    0    1
 [5,]    1    0
 [6,]    1    0
 [7,]    1    0
 [8,]    0    1
 [9,]    1    0
[10,]    1    0
> example(cluster.stats)

clstr.> set.seed(20000)

clstr.> face <- rFace(200, dMoNo = 2, dNoEy = 0, p = 2)

clstr.> dface <- dist(face)

clstr.> complete3 <- cutree(hclust(dface), 3)

clstr.> cluster.stats(dface, complete3, alt.clustering = as.integer(attr(face, 
    "grouping")))
$n
[1] 200

$cluster.number
[1] 3

$cluster.size
[1] 136  60   4

$diameter
[1] 10.795191  5.756704  9.000000

$average.distance
[1] 3.032856 2.205095 7.047772

$median.distance
[1] 2.842125 1.478951 8.321658

$separation
[1] 5.874239 5.874239 7.222125

$average.toother
[1] 13.77209 13.02913 20.75148

$separation.matrix
          [,1]     [,2]      [,3]
[1,]  0.000000 5.874239 14.975187
[2,]  5.874239 0.000000  7.222125
[3,] 14.975187 7.222125  0.000000

$average.between
[1] 13.72910

$average.within
[1] 2.901325

$n.between
[1] 8944

$n.within
[1] 10956

$clus.avg.silwidths
        1         2         3 
0.7522817 0.8179603 0.3548236 

$avg.silwidth
[1] 0.7640361

$g2
NULL

$g3
NULL

$hubertgamma
[1] 0.8834354

$dunn
[1] 0.5441534

$wb.ratio
[1] 0.2113267

$corrected.rand
[1] 0.345064

> 
